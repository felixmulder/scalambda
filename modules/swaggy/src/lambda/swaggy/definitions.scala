package lambda.swaggy

import io.swagger.models._
import io.swagger.models.properties._
import scala.meta._
import scala.collection.JavaConverters._
import cats.data.NonEmptyList

import converters._

object definitions {

  /** Creates case class definitions for requests and responses from the
   *  swagger-core parsed definition
   *
   *  @param swagger the parsed swagger 2.0 generated by the swagger-parser lib
   *  @param pkg the package in which to put the generated definitions
   */
  def apply(swagger: Swagger, pkg: NonEmptyList[String]): List[DomainType] =
    swagger.getDefinitions.asScala.map { case (name, model) =>
      val tpname = Type.Name(name)
      DomainType(
        name,
        pkg,
        List(
          q"import io.circe.{Decoder, Encoder}",
          q"import io.circe.generic.semiauto.{deriveDecoder, deriveEncoder}",
          q"import io.circe.java8.time._",
          q"import java.time.Instant",
        ),
        q"final case class $tpname(..${constructorParams(model)})",
        q"""
          object ${Term.Name(name)} {
            implicit val decoder: Decoder[$tpname] =
              deriveDecoder[$tpname]

            implicit val encoder: Encoder[$tpname] =
              deriveEncoder[$tpname]
          }
        """,
      )
    }
    .toList

  private def constructorParams(m: Model): List[Term.Param] = m match {
    case m: ModelImpl if m.getType == "object" =>
      m.getProperties.asScala.map { case (name, tpe) =>
        Term.Param(
          Nil, Name(name), Some(propertyToType(tpe)), None
        )
      }
      .toList
    case _ => Nil
  }
}
